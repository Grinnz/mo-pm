=pod

=for comment
DO NOT EDIT. This Pod was generated by Swim.
See http://github.com/ingydotnet/swim-pm#readme

=encoding utf8

Mo ==

Micro Objects. Mo is less.

=for html
<a href="https://travis-ci.org/ingydotnet/mo-pm"><img src="https://travis-ci.org/ingydotnet/mo-pm.png" alt="mo-pm"></a>
<a href="https://coveralls.io/r/ingydotnet/mo-pm?branch=master"><img src="https://coveralls.io/repos/ingydotnet/mo-pm/badge.png" alt="mo-pm"></a>

=head1 SYNOPSIS

    package Less;
    use Mo;
    extends 'Nothing';

    has something => ();

=head1 DESCRIPTION

use Mo. Mo is less. Much less.

Moose is huge. Moose led to Mouse led to Moo led to Mo. M is nothing. Mo is
more. Not much.

When Moo is more than you need, drop an 'o' and get some Mo.

To get just a little Mo from Mo, use [Mo Features] below.

=head1 CORE FEATURES

This is what you get. Nothing Mo.

=over

=item C<new> method

Mo provides a C<new> object constructor. You pass it a list of name/value
pairs and it returns a new object.

Constructor will not call BUILD methods. This is available using the
L<Mo::build> feature.

=item C<extends>

Mo exports the C<extends> keyword, to declare your parent class. C<Mo::Object>
itself is your default parent class.

Mo only supports single inheritance. If you need multiple inheritance or
roles, you should upgrade to Moo.

=item C<has>

Mo exports a C<has> keyword, to generate accessors.

These accessors always support both C<get> and C<set> operations. That's it.

    has name => ();
    has thing => (foo => 'bar');  # arguments silently ignored

All arguments passed to C<has> are ignored. This makes it easier to switch
between Mo and Moo, without having to change all your accessors.

=item C<strict> and C<warnings>

Mo turns on C<use strict> and C<use warnings> for you.

=item Embeddable

Mo is tiny. It is compressed into a single line. You can easily inline it in
your code, should you want to do that. See L<Mo::Inline> for more information,
including a utility that will do it for you.

=back

=head1 MO FEATURES

    Mo is the bare minimum needed for Perl OO. Many times you'll want just a
    couple more features. Don't worry. Mo's got you covered:

      use Mo qw'build default builder coerce is required';
      has name1 => ( default => sub { 'Joe' } );
      has name2 => ( builder => 'name_builder' );
      has name3 => ( coerce => sub {$_[0]} );
      has name4 => ( is => 'ro' );
      has name4 => ( required => 1 );
      sub BUILD {
          my $self = shift;
          ...
      }

    Mo simply loads the feature classes [Mo::build], [Mo::default],
    [Mo::builder], [Mo::coerce], [Mo::is] and [Mo::required].  The first one
    supports BUILD constructing and the other three add their magics to `has`. A
    [Mo::Feature] module can enhance `new`, `extends` and `has`, and also add new
    export subs, or remove existing ones.  Features can also be combined for a
    single accessor.  See [Mo::Features] for a list of all the features and for
    an explanation of the Feature API..

=head1 SEE

=over

=item * L<Mo::Features>

=item * L<Mo::Inlining>

=item * L<Mo::Hacking>

=item * L<Mo::Design>

=back

=head1 AUTHORS

=over

=item * Ingy döt Net <ingy@cpan.org>

=item * Damien 'dams' Krotkine <dams@cpan.org>

=item * Matt S. Trout (mst) <mst@shadowcat.co.uk>

=item * Christian Walde <walde.christian@googlemail.com>

=item * Alessandro Ranellucci (aar/alexrj) <aar@cpan.org>

=item * Carlos Lima (priodev) <carlos@cpan.org>

=back

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2011-2014. Ingy döt Net.

This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

See L<http://www.perl.com/perl/misc/Artistic.html>

=cut
